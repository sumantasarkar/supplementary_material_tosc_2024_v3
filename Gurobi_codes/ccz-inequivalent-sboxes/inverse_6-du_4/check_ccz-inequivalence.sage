from sage.crypto.sbox import SBox
from sage.all import Matrix, GF, vector, log, randint

def tobin(x, n):
    return [(x >> i) & 1 for i in reversed(range(0, n))]

def frombin(v):
    y = 0
    for i in range(0, len(v)):
        y = (y << 1) | int(v[i])
    return y


def are_ccz_equivalent(f, g):
    """Returns True if and only if the functions with LUT f and g are
    CCZ-equivalent. This implementation is inspired by the one of
    Kazymyrov:
    https://github.com/okazymyrov/sbox/blob/master/Sage/CSbox.sage#L624
    """
    if len(f) != len(g):
        raise Exception("f and g are of different sizes!")
    N = int(log(len(f), 2))
    mask = sum((1 << i) for i in range(0, N))
    mat_f = Matrix(GF(2), len(f), 2*N+1, [
        [1] + tobin((x << N) | f[x], 2*N) for x in range(0, 2**N)
    ])
    mat_g = Matrix(GF(2), len(f), 2*N+1, [
        [1] + tobin((x << N) | g[x], 2*N) for x in range(0, 2**N)
    ])
    code_f = LinearCode(mat_f.transpose())
    code_g = LinearCode(mat_g.transpose())
    return code_f.is_permutation_equivalent(code_g)


inv6 = [0, 1, 45, 54, 59, 18, 27, 30, 48, 10, 9, 49, 32, 62, 15, 14, 24, 51, 5, 58, 41, 56, 53, 35, 16, 50, 31, 6, 42, 38, 7, 26, 12, 63, 52, 23, 47, 61, 29, 43, 57, 20, 28, 39, 55, 2, 60, 36, 8, 11, 25, 17, 34, 22, 3, 44, 21, 40, 19, 4, 46, 37, 13, 33]

S6_max = [
[0, 1, 45, 54, 59, 18, 27, 30, 48, 10, 9, 49, 32, 62, 15, 14, 24, 51, 5, 58, 41, 56, 53, 35, 16, 50, 31, 6, 42, 38, 7, 26, 12, 63, 52, 23, 47, 61, 29, 43, 57, 20, 28, 39, 55, 2, 60, 36, 8, 11, 25, 17, 34, 22, 3, 44, 21, 40, 19, 4, 46, 37, 13, 33],
[1, 0, 44, 55, 58, 19, 26, 31, 49, 11, 8, 48, 33, 63, 14, 15, 25, 50, 4, 59, 40, 57, 52, 34, 17, 51, 30, 7, 43, 39, 6, 27, 13, 62, 53, 22, 46, 60, 28, 42, 56, 21, 29, 38, 54, 3, 61, 37, 9, 10, 24, 16, 35, 23, 2, 45, 20, 41, 18, 5, 47, 36, 12, 32],
[1, 0, 44, 55, 58, 19, 26, 31, 49, 11, 8, 48, 33, 63, 10, 15, 25, 50, 4, 59, 40, 57, 52, 34, 17, 51, 30, 7, 43, 39, 6, 27, 13, 62, 53, 22, 46, 60, 28, 42, 56, 21, 29, 38, 54, 3, 61, 37, 9, 14, 24, 16, 35, 23, 2, 45, 20, 41, 18, 5, 47, 36, 12, 32],
[1, 0, 44, 55, 58, 19, 26, 31, 49, 42, 8, 48, 33, 63, 14, 15, 25, 50, 4, 59, 40, 57, 52, 34, 17, 51, 30, 7, 43, 39, 6, 27, 13, 62, 53, 22, 46, 60, 28, 11, 56, 21, 29, 38, 54, 3, 61, 37, 9, 10, 24, 16, 35, 23, 2, 45, 20, 41, 18, 5, 47, 36, 12, 32],
[5, 4, 40, 51, 62, 23, 30, 27, 53, 15, 12, 52, 37, 59, 10, 11, 29, 54, 0, 63, 44, 61, 48, 38, 21, 17, 26, 3, 47, 35, 2, 31, 9, 58, 49, 18, 42, 56, 24, 46, 60, 55, 25, 34, 50, 7, 57, 33, 13, 14, 28, 20, 39, 19, 6, 41, 16, 45, 22, 1, 43, 32, 8, 36],
[7, 4, 40, 51, 62, 23, 30, 27, 53, 15, 12, 52, 37, 59, 10, 11, 29, 54, 0, 63, 44, 61, 48, 38, 21, 17, 26, 3, 47, 35, 2, 31, 9, 58, 49, 18, 42, 56, 24, 46, 60, 55, 25, 34, 50, 5, 57, 33, 13, 14, 28, 20, 39, 19, 6, 41, 16, 45, 22, 1, 43, 32, 8, 36],
[1, 0, 44, 55, 58, 19, 26, 31, 49, 12, 8, 48, 33, 63, 14, 15, 25, 50, 4, 59, 40, 57, 52, 34, 17, 51, 30, 7, 43, 39, 6, 27, 13, 62, 53, 22, 46, 60, 28, 11, 56, 21, 29, 38, 54, 3, 61, 37, 9, 10, 24, 16, 35, 23, 2, 45, 20, 41, 18, 42, 47, 36, 5, 32],
[7, 4, 40, 51, 62, 23, 30, 27, 53, 15, 12, 52, 37, 59, 10, 11, 29, 54, 0, 63, 44, 61, 48, 38, 21, 17, 26, 5, 47, 35, 2, 31, 9, 58, 49, 18, 42, 56, 24, 14, 60, 55, 25, 34, 50, 3, 57, 33, 13, 46, 28, 20, 39, 19, 6, 41, 16, 45, 22, 1, 43, 32, 8, 36],
]

for S in S6_max:
    print(are_ccz_equivalent(S, inv6))
    S = SBox(S)
    print(S.differential_uniformity())
    